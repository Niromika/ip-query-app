{"version":3,"sources":["services/location.service.js","components/Map.js","containers/MapContainer.js","App.js","serviceWorker.js","index.js"],"names":["LOCATION_API","getUserLocation","a","fetch","res","json","body","MapLib","withScriptjs","withGoogleMap","props","defaultZoom","defaultCenter","lat","lng","position","Map","loadingElement","style","height","containerElement","mapElement","googleMapURL","MapStyled","styled","div","MapContainer","state","center","zoom","city","country","className","this","setState","latitude","longitude","country_name","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTACMA,EAAY,wCADF,4DAGD,SAAeC,IAA9B,+B,4CAAe,8BAAAC,EAAA,sEACOC,MAAMH,GADb,cACLI,EADK,gBAEQA,EAAIC,OAFZ,cAELC,EAFK,yBAGJA,GAHI,4C,kCCETC,EAASC,uBAAaC,yBAAc,SAACC,GAAD,OACtC,kBAAC,YAAD,CACIC,YAAa,EACbC,cAAe,CAAEC,IAAKH,EAAMG,IAAKC,IAAKJ,EAAMI,MAE5C,kBAAC,SAAD,CAAQC,SAAU,CAAEF,IAAKH,EAAMG,IAAKC,IAAKJ,EAAMI,YAaxCE,EATH,SAACN,GACT,OAAO,kBAACH,EAAD,eACHU,eAAgB,yBAAKC,MAAO,CAAEC,OAAO,UACrCC,iBAAkB,yBAAKF,MAAO,CAAEC,OAAO,UACvCE,WAAY,yBAAKH,MAAO,CAAEC,OAAO,UACjCG,aAAY,sDAhBE,0CAgBF,+CACRZ,K,olBCfZ,IAAMa,EAAYC,IAAOC,IAAV,KA+DAC,E,4MAjCbC,MAAQ,CACNC,OAAQ,CACNf,IAAK,MACLC,IAAK,OAEPe,KAAM,GACNC,KAAM,GACNC,QAAS,I,uDAIT,OACE,kBAACR,EAAD,KACE,yBAAKS,UAAU,oBACb,wBAAIA,UAAU,SAAd,UAA0BC,KAAKN,MAAMG,KAArC,aAA8CG,KAAKN,MAAMI,WAE3D,kBAAC,EAAD,CAAKlB,IAAKoB,KAAKN,MAAMC,OAAOf,IAAKC,IAAKmB,KAAKN,MAAMC,OAAOd,S,0KAMzCb,I,OAAbK,E,OACN2B,KAAKC,SAAS,CACZN,OAAQ,CACNf,IAAKP,EAAK6B,SAAUrB,IAAKR,EAAK8B,WAEhCN,KAAMxB,EAAKwB,KACXC,QAASzB,EAAK+B,e,2GA7BOC,IAAMC,WCtBlBC,E,uKANX,OACE,kBAAC,EAAD,U,GAJYD,aCSEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.855016f1.chunk.js","sourcesContent":["const API_KEY = 'dcb19aafdd3accd0ca61b014f91a6cc5888d57f4f703a9758da3751e'\r\nconst LOCATION_API = `https://api.ipdata.co?api-key=${API_KEY}`;\r\n\r\nexport default async function getUserLocation() {\r\n    const res = await fetch(LOCATION_API);\r\n    const body = await res.json();\r\n    return body;\r\n}","import React from 'react';\r\nimport { GoogleMap, withGoogleMap, Marker, withScriptjs } from \"react-google-maps\";\r\n\r\nconst GOOGLE_API_KEY= 'AIzaSyAYzmn8NnI9EPHKhuKm-lAaXdQtnm22FaA';\r\n\r\nconst MapLib = withScriptjs(withGoogleMap((props) =>\r\n    <GoogleMap\r\n        defaultZoom={8}\r\n        defaultCenter={{ lat: props.lat, lng: props.lng }}\r\n    >\r\n        <Marker position={{ lat: props.lat, lng: props.lng }} />\r\n    </GoogleMap>\r\n))\r\n\r\nconst Map = (props) => {\r\n    return <MapLib\r\n        loadingElement={<div style={{ height: `100%` }} />}\r\n        containerElement={<div style={{ height: `100%` }} />}\r\n        mapElement={<div style={{ height: `100%` }} />}\r\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${GOOGLE_API_KEY}&v=3.exp&libraries=geometry,drawing,places`}\r\n        {...props}\r\n    />\r\n}\r\nexport default Map;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport getUserLocation from '../services/location.service';\r\nimport Map from '../components/Map';\r\n\r\nconst MapStyled = styled.div`\r\n  height: 100%;\r\n  width: 100%;\r\n  position: relative;\r\n\r\n  .title-background {\r\n    top: 10px;\r\n    padding: 15px;\r\n    position: absolute;\r\n    left: 50%;\r\n    transform: translate(-50%);\r\n    z-index: 1;\r\n    background-color: rgba(0, 0, 0, 0.4);\r\n    border-radius: 10px;\r\n    box-shadow: 0px 0px 13px 4px rgba(0,0,0,0.75);\r\n\r\n    .title {\r\n      margin: 0;\r\n      color: #fff;\r\n      text-shadow:\r\n        -1px -1px 0 #000,  \r\n        1px -1px 0 #000,\r\n        -1px 1px 0 #000,\r\n        1px 1px 0 #000;\r\n    }\r\n  }\r\n  \r\n`\r\n\r\nclass MapContainer extends React.Component {\r\n  state = {\r\n    center: {\r\n      lat: 59.95,\r\n      lng: 30.33\r\n    },\r\n    zoom: 11,\r\n    city: '',\r\n    country: ''\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <MapStyled>\r\n        <div className=\"title-background\">\r\n          <h1 className=\"title\">{`${this.state.city}, ${this.state.country}`}</h1>\r\n        </div>\r\n        <Map lat={this.state.center.lat} lng={this.state.center.lng} />\r\n      </MapStyled>\r\n    )\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const body = await getUserLocation();\r\n    this.setState({\r\n      center: {\r\n        lat: body.latitude, lng: body.longitude\r\n      }, \r\n      city: body.city,\r\n      country: body.country_name\r\n    })\r\n  }\r\n}\r\n\r\nexport default MapContainer;","import React, { Component } from 'react';\nimport MapContainer from './containers/MapContainer';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <MapContainer />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}